# Check that the provision user exists.
- name: Get UID of the provision user
  command: >
    id -u {{ provision_user }}
  register: provision_user_uid_output
  ignore_errors: true
  changed_when: false

# If the provision user exists, and is not root, perform a variety of cleanup tasks.
- when: (provision_user_uid_output|success) and (provision_user != "root")
  block:
    # Look for and kill any processes owned by the provision user.
    # This will let us remove the user later on.
    - name: Check for processes owned by non-root user
      command: >
        pgrep -u {{ provision_user }}
      register: proc_exist
      ignore_errors: true
      become: true

    - name: Kill (SIGTERM) all processes owned by non-root user
      command: >
        pkill -u {{ provision_user }}
      ignore_errors: true
      become: true
      when: proc_exist|success

    - name: Wait for processes to exit
      command: >
        pgrep -c -u {{ provision_user }}
      register: proc_kill
      retries: 5
      delay: 3
      until: proc_kill.stdout == '0'
      ignore_errors: true
      when: proc_exist|success
      become: true

    - name: Kill (SIGKILL) all processes owned by non-root user
      command: >
        pkill -9 -u {{ provision_user }}
      when: proc_exist|success
      ignore_errors: true
      become: true

    # Now that we have taken care of any processes owned by this user
    # account we can delete it.
    - name: Remove non-root user account
      user:
        name: "{{ provision_user }}"
        state: absent
        remove: true
      become: true

    # The `XDG_RUNTIME_DIR` (`/run/user/<uid>`) doesn't always get cleaned
    # up when we remove the user, which can lead to libvirt problems
    # later on.  We can't remove the directory itself -- it's a tmpfs
    # mountpoint -- but we can remove the content.
    - name: Remove non-root user ephemeral files
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - /run/user/{{ provision_user_uid_output.stdout }}/*
      become: true

